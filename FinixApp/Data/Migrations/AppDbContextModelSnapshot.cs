// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data.ModelsEF;

#nullable disable

namespace backend.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("backend.Data.ModelsEF.TCreditNote", b =>
                {
                    b.Property<long>("CreditNoteNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CreditNoteAmount")
                        .HasColumnType("TEXT")
                        .HasColumnName("credit_note_amount");

                    b.Property<DateTime>("CreditNoteDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("credit_note_date");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("CreditNoteNumber");

                    b.HasIndex("InvoiceNumber")
                        .HasDatabaseName("idx_invoice_number_tCreditNote");

                    b.ToTable("t_credit_note", (string)null);
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TCustomer", b =>
                {
                    b.Property<string>("Run")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("customer_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("customer_name");

                    b.HasKey("Run");

                    b.ToTable("t_customer", (string)null);
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TInvoice", b =>
                {
                    b.Property<long>("InvoiceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerRun")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("invoice_status");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_due_date");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_amount");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("CustomerRun")
                        .HasDatabaseName("idx_customer_run_tInvoice");

                    b.HasIndex("InvoiceNumber")
                        .HasDatabaseName("idx_invoice_number_tInvoice");

                    b.HasIndex("InvoiceStatus")
                        .HasDatabaseName("idx_invoice_status_tInvoice");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("idx_payment_status_tInvoice");

                    b.HasIndex("InvoiceStatus", "PaymentStatus")
                        .HasDatabaseName("idx_invoice_and_payment_status_tInvoice");

                    b.ToTable("t_invoice", (string)null);
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TPayment", b =>
                {
                    b.Property<long>("PaymentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method");

                    b.HasKey("PaymentNumber");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("idx_invoice_number_tPayment");

                    b.ToTable("t_payment", (string)null);
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TProduct", b =>
                {
                    b.Property<long>("ProductNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_price");

                    b.HasKey("ProductNumber");

                    b.HasIndex("InvoiceNumber")
                        .HasDatabaseName("idx_invoice_number_tProduct");

                    b.ToTable("t_product", (string)null);
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TRole", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("role_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("RoleId");

                    b.ToTable("t_role", (string)null);
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("idx_role_id_tUser");

                    b.ToTable("t_user", (string)null);
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TCreditNote", b =>
                {
                    b.HasOne("backend.Data.ModelsEF.TInvoice", "TInvoice")
                        .WithMany("TInvoiceCreditNote")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TInvoice");
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TInvoice", b =>
                {
                    b.HasOne("backend.Data.ModelsEF.TCustomer", "TCustomer")
                        .WithMany("TInvoices")
                        .HasForeignKey("CustomerRun")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TCustomer");
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TPayment", b =>
                {
                    b.HasOne("backend.Data.ModelsEF.TInvoice", "TInvoice")
                        .WithOne("TInvoicePayment")
                        .HasForeignKey("backend.Data.ModelsEF.TPayment", "InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TInvoice");
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TProduct", b =>
                {
                    b.HasOne("backend.Data.ModelsEF.TInvoice", "TInvoice")
                        .WithMany("TInvoiceDetail")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TInvoice");
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TUser", b =>
                {
                    b.HasOne("backend.Data.ModelsEF.TRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TCustomer", b =>
                {
                    b.Navigation("TInvoices");
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TInvoice", b =>
                {
                    b.Navigation("TInvoiceCreditNote");

                    b.Navigation("TInvoiceDetail");

                    b.Navigation("TInvoicePayment");
                });

            modelBuilder.Entity("backend.Data.ModelsEF.TRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
